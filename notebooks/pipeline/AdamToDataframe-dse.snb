{"metadata":{"name":"Adam to Dataframe","user_save_timestamp":"1970-01-01T00:00:00.000Z","auto_save_timestamp":"1970-01-01T00:00:00.000Z","language_info":{"name":"scala","file_extension":"scala","codemirror_mode":"text/x-scala"},"trusted":true,"customLocalRepo":"/root/.ivy2","customRepos":null,"customDeps":["org.bdgenomics.adam % adam-core % 0.15.0","- org.apache.hadoop % hadoop-client %   _","- org.apache.spark  % spark-core    %   _","- org.scala-lang    %     _         %   _","- org.scoverage     %     _         %   _"],"customImports":null,"customArgs":null,"customSparkConf":{"spark.master":"local[*]","spark.eventLog.dir":"/opt/spark/logs","spark.cassandra.connection.host":"localhost","spark.eventLog.enabled":"true","spark.executor.memory":"512m","spark.serializer":"org.apache.spark.serializer.KryoSerializer","spark.kryo.registrator":"org.bdgenomics.adam.serialization.ADAMKryoRegistrator","spark.kryoserializer.buffer.mb":"4","spark.kryo.referenceTracking":"true","spark.sql.shuffle.partitions":"16"}},"cells":[{"metadata":{"id":"2833769375D343D6B2C4DCB0E57B6495"},"cell_type":"markdown","source":"# Prepare the data in parquet"},{"metadata":{"id":"05FFF6F86FBF47F5907E3AE2452C8774"},"cell_type":"markdown","source":"In this notebook, we'll preprocess a bunch data into a form that can be used in further analyses. So we'll do these things:\n1. take genomics data ([**genotypes**](https://en.wikipedia.org/wiki/Genotype)) for several samples/persons\n2. clean the data (removing rare cases)\n3. associating the samples with their population \n4. remove genotypes for which we don't know the origin\n5. simplify the genotypes and encode their value (allele) into a grid space\n6. save the resulting dataset in a new parquet format using a DataFrame"},{"metadata":{"id":"45A4F7262C144BB2BE577B3385A19D8A"},"cell_type":"markdown","source":"## ADAM"},{"metadata":{"id":"45D95E89C95A4CA2A2166D4411BCA9D3"},"cell_type":"markdown","source":"The source data is stored locally in this docker instance and has been created using the 1000genomes datasets (stripped, cleaned).\n\nThis dataset has been formated using the ADAM format, which is a Avro/Parquet representation of genomics data.\n\nADAM is an open source project from Berkeley's AMPlab that also adds a genomics API on top of Spark."},{"metadata":{"id":"CB5F30A52C2B489D851207CEBC5969E3"},"cell_type":"markdown","source":"### Import some packages from ADAM and Spark"},{"metadata":{"id":"74D605A297464AC686DBFC8242053026"},"cell_type":"markdown","source":"ADAM for genomics domain classes\n\nRDD for Spark data interface"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"34E3F272CE1940A786EA24F3725C1E9F"},"cell_type":"code","source":"import org.bdgenomics.formats.avro.Genotype\nimport org.bdgenomics.adam.rdd.ADAMContext._\nimport org.bdgenomics.adam.rdd.ADAMContext\n  \nimport org.apache.spark.rdd.RDD","outputs":[]},{"metadata":{"id":"565380CB5AF74CBDB75C34D62B253F5B"},"cell_type":"markdown","source":"### Data directory"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"2756BAC29EE34D719DA61D29FAEA522C"},"cell_type":"code","source":"val dataRoot = \"/opt/data\"","outputs":[]},{"metadata":{"id":"64DCD7AAF97745638F4EDD6FBEBBA5F5"},"cell_type":"markdown","source":"Raw dataset: ADAM formated genotypes, chromosome 22 sample (16,000,000 -> 18,000,000)"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"5EB43174F9004B05A87A56A5B1C8F5CC"},"cell_type":"code","source":"val adamFile = s\"$dataRoot/chr22-sample13.adam\"","outputs":[]},{"metadata":{"id":"F8467AE81BD64CA7B9B19BA56BAC23FF"},"cell_type":"markdown","source":"### Load the data: \nWe create an RDD[Genotype]\n\nGenotype is provided by ADAM\n\nRDD is th interface to define transformations and actions on a distributed dataset\n\nadamLoad is a function provided by ADAM (applies on sparkContext through implicit conversion)"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"33869465ED814AFD9AE6BDF0CFA74B03"},"cell_type":"code","source":"val gts: RDD[Genotype] = sparkContext.adamLoad(adamFile)","outputs":[]},{"metadata":{"id":"E31DB92C4010433389298021BD1002A5"},"cell_type":"markdown","source":"### Count the number of genotypes in the dataset"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"55B312EBC811498384F9B382D02400DD"},"cell_type":"code","source":"gts.count","outputs":[]},{"metadata":{"id":"9CA9DDD6F558471886D4A4A70E44EB66"},"cell_type":"markdown","source":"### What defines a genotype?"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"5FB115422C6D440C87666D44F4B5FDA0"},"cell_type":"code","source":"gts.first","outputs":[]},{"metadata":{"id":"F15D2FCFD10A48139E669D19810D2151"},"cell_type":"markdown","source":"### Filter on Single nucleotide Polymorphysims\nIn plain english, we only select the simplest genomic variations: substitution of a base by another"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"E5ACBCF070F34A14A985DEEAD430417C"},"cell_type":"code","source":"val snpgts = gts.filter{g => \n               val bases = Set(\"A\",\"T\",\"G\",\"C\")\n               bases.contains(g.getVariant.getReferenceAllele) && \n                                      bases.contains(g.getVariant.getAlternateAllele)\n          }","outputs":[]},{"metadata":{"id":"525E65CB1E7042FEBB422982773DA8B0"},"cell_type":"markdown","source":"### We removed some elements"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"A4D0AA42CAE846B5833EFFAB4D9A6B34"},"cell_type":"code","source":"snpgts.count","outputs":[]},{"metadata":{"id":"D36A297913A6459788DFAC6FFA06CBA6"},"cell_type":"markdown","source":"### We import classes and functions to work with Dataframes"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"30BE98A1F7D14871B76B2BE9758075E5"},"cell_type":"code","source":"val sqlContext = new org.apache.spark.sql.SQLContext(sparkContext)\nimport sqlContext.implicits._\nimport org.apache.spark.sql.functions._","outputs":[]},{"metadata":{"id":"6D7D7F8B76D04766A5A4CC48434523C7"},"cell_type":"markdown","source":"### Now we'll read the metadata of the samples (persons)"},{"metadata":{"id":"C4EA658FFDF444378F93DF8C78C713D1"},"cell_type":"markdown","source":"We need to point to a file with population data to be joined"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"6867D14FD2B64C9B8E065905233411F0"},"cell_type":"code","source":"val panelFile = s\"$dataRoot/ALL.panel\"","outputs":[]},{"metadata":{"id":"6CCD869147334A438BB2A7985B976B54"},"cell_type":"markdown","source":"So the below cell is showing the showing the content which is basically associating a sample with:\n* population\n* enclosing population\n* gender"},{"metadata":{"trusted":true,"input_collapsed":false,"output_stream_collapsed":true,"collapsed":false,"id":"74D65BC0F45141938E57E44899A734E3"},"cell_type":"code","source":":sh head -n 5 $panelFile","outputs":[]},{"metadata":{"id":"CBDF7B2998AF4166893BE4E107D3D223"},"cell_type":"markdown","source":"#### Now we parse the file and create a Map out of it"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"0283EBF6074D4C7F93ED533E1B1F3B9F"},"cell_type":"code","source":"import scala.io.Source\nval panel: Map[String,String] = Source.fromFile(panelFile) // open the file\n                                      .getLines()          // get iterator on lines\n                                      .map{ line =>        // map each line to a tuple (Sample, Population)\n                                        val toks = line.split(\"\\t\").toList // columns are sep. by TAB\n                                        (toks(0), toks(1))                 // 1st Sample, 2nd Population\n                                      }\n                                      .toMap","outputs":[]},{"metadata":{"id":"13A165F253E14FC18338ADA61D5AA764"},"cell_type":"markdown","source":"### Broadcast the Map ( sampleId -> population )\n\nGive every node in the cluster a copy of the Map. So this map won't have to be shipped with **each** task!"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"A1AAB6B9944C4A0EAA16A683EB48B07C"},"cell_type":"code","source":"// broadcast the panel \nval bPanel = sparkContext.broadcast(panel)","outputs":[]},{"metadata":{"id":"DDE65FD1FD754D2EAE23E141719D7C82"},"cell_type":"markdown","source":"### And we filter on the samples with a known population"},{"metadata":{"id":"98DD0D0DB41145E6807E4DDC6832D22B"},"cell_type":"markdown","source":"We get rid of the samples not found in the populations we kept in the Map above"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"0A5E0163BFE3492E9E19FC69E8701CE4"},"cell_type":"code","source":"val finalGts = snpgts.filter{g => bPanel.value.contains(g.getSampleId)}","outputs":[]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"FC396F380D0748768A098AD3DA046CC7"},"cell_type":"code","source":"finalGts.count","outputs":[]},{"metadata":{"id":"3F60300D11B14B17BEA805A4FBB29982"},"cell_type":"markdown","source":"### Some helper functions to format data from ADAM types to simpler schema"},{"metadata":{"id":"54CD4CC55E8A4A9DB50D902F65F4BA00"},"cell_type":"markdown","source":"These will be used to extract an ID for each variant."},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"09E42C39057B459A8C1B101C46A4A56B"},"cell_type":"code","source":"def variantid(g: Genotype): String = {\n  var v = g.getVariant\n  s\"${v.getContig.getContigName}\"\n}","outputs":[]},{"metadata":{"id":"DD4339E4273140EE853CFAC0AFCB7A7B"},"cell_type":"markdown","source":"This helper is encoding the genotype in a small space where the manathan distance can be used between two genotypes."},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"63F52724E13C41B28FB10E7F4BBFCB8F"},"cell_type":"code","source":"val allelesToPair = (g: Genotype, ga: org.bdgenomics.formats.avro.GenotypeAllele) => ga match {\n  case org.bdgenomics.formats.avro.GenotypeAllele.Ref => (1L, 0L)\n  case org.bdgenomics.formats.avro.GenotypeAllele.Alt => (0L, 1L)\n  case _ => (0L, 0L)\n}","outputs":[]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":true,"id":"0B21B7542A53464B8B5D591CEAF5D8F2"},"cell_type":"markdown","source":"### We define FlatGenotype, a structure used to store the data we want in a simple table"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"3A10EA021E1649B88A72F26910CC52BF"},"cell_type":"code","source":"object gCtx extends java.io.Serializable {\n  case class FlatGenotype(\n    population: String,\n    sampleId: String,\n    chromosome: String,\n    start: Long,\n    ref: String,\n    alt: String,\n    refCnt: Long,\n    altCnt: Long\n  )\n}\nimport gCtx._\n    ","outputs":[]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":true,"id":"C1382E991CB44E048B2D0415CC5CCC37"},"cell_type":"markdown","source":"### And now we transform ADAM Genotypes in Flattened structure simpler to count on"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"FDB032E75E1C4720A8B9050E79FBEB90"},"cell_type":"code","source":"val flatgts = finalGts.flatMap{ g => \n                g.getAlleles.map{ ga => \n                  val al = allelesToPair(g, ga)\n                  FlatGenotype(\n                    bPanel.value.getOrElse(g.getSampleId(), \"\"),\n                    g.getSampleId,\n                    variantid(g),\n                    g.getVariant.getStart,\n                    g.getVariant.getReferenceAllele,\n                    g.getVariant.getAlternateAllele,\n                    al._1,\n                    al._2\n                  )\n                }\n              }","outputs":[]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"9D5AE89D8872410099DE4F2A0EB96F82"},"cell_type":"code","source":"flatgts.cache()","outputs":[]},{"metadata":{"id":"AF1D18DA23BD46568C39334B8C13EB19"},"cell_type":"markdown","source":"### We use the dataframe API because saving/reading/aggregation is much easier...\n\nDefault format is parquet, schema included :)"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"1A1739FE2181449880276F14A13EE0E8"},"cell_type":"code","source":"val gdf = flatgts.toDF()\n()","outputs":[]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"B655AAC07C204434A7725135DBFCE40D"},"cell_type":"code","source":"gdf.write.save(s\"/tmp/flat-genotypes13\")","outputs":[]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":true,"id":"049B4CFDF43941ED890532A27419DFA3"},"cell_type":"code","source":"","outputs":[]}],"nbformat":4}